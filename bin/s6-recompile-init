#!/bin/sh
# 
# script to automatically setup and recompile the s6-init
#
set -eu
# options
HERE="$(dirname "$(realpath "$0")")"
. "${HERE}"/paths.sh
. "${BIN}"/fmt.sh

RESCUE_SHELL_CMD="/sbin/agetty tty12 38400 linux"  # command used to set up the rescue shell
TIMESTAMP="$(date +'%F_%T')"  # used for unique compilation names


# prepare directories
mkdir -p "${S6_SERVICE_HOME}" "${S6_COMPILE_HOME}" "${S6_BUNDLE_HOME}"

DEST="${S6_COMPILE_HOME}/${TIMESTAMP}" 
printf 'Compiling into %s with targets from %s, and %s\n' "$(fmt_debug "$DEST")" "$(fmt_debug "${S6_SERVICE_HOME}")" "$(fmt_debug "${S6_BUNDLE_HOME}")"
s6-rc-compile -- "${DEST}" \
	"${S6_SERVICE_HOME}"/* \
	"${S6_BUNDLE_HOME}" || { err=$?; printf 'Failed to compile\n'; exit ${err}; }

hint_set_new_init() {
	printf 'If you want to update to the new init immediately, run the following:\n'
	printf '\t%s\n' "$(fmt_warn "s6-rc-update -- '${DEST}'")"
	printf '\n'

	printf 'If you want to activate the new permanently, run the following\n'
	printf '\t%s\n' "$(fmt_warn "ln -sfT -- '${DEST}' '${S6_ACTIVE_COMPILED}'")"
	printf '\n'
}

set_new_init() {
	printf 'Updating init\n'
	s6-rc-update -- "${DEST}" || true  # would mean we ain't running s6, probably, which is often expected
	test -L "${S6_ACTIVE_COMPILED}" && unlink "${S6_ACTIVE_COMPILED}"
	ln -sT -- "${DEST}" "${S6_ACTIVE_COMPILED}"
	printf "%s has been updated\n" "${S6_ACTIVE_COMPILED}"
}

hint_s6_linux_init() {
	printf 'To get s6 to work as PID=1, some changes are required in %s\n' "$(fmt_debug "${S6_LINUX_INIT}/current/scripts/")"
	printf '\trc.init: uncomment s6-rc-init /run/service\n'
	printf '\t\tWill copy the compiled services into /run/service\n'
	printf '\trc.shutdown: uncomment s6-rc -v2 -bDa change\n'
	printf '\t\tBrings down all services\n'
	printf '\trunlevel: uncomment s6-rc -v2 -up change "${1:-default}"\n'
	printf '\t\tBrings up all services up to the given runlevel (args are from kernel cmdline)\n'
	printf '\n'
	
	printf 'You can also run this script with enable as arg $1 to do this automatically\n'
}

create_s6_linux_init() {
	printf 'Setting up s6-linux-init\n'
	s6-linux-init-maker \
		-c "${S6_INIT_BASEDIR}" \
		-G "${RESCUE_SHELL_CMD}" \
		-f "${S6_LINUX_INIT}/skel" \
		-u "${S6_LOG_USER}" \
		-1 \
		-p "/usr/sbin:/usr/bin:/sbin:/bin" \
		-t 2 \
		"${PWD}/tmp" && \
	mv -fT -- "${PWD}/tmp" "${S6_LINUX_INIT}/current"  || { err=$?; printf 'Failed to create s6-linux-init\n'; exit $err; }

	printf 'Yay! We created %s succesfully\n' "${S6_LINUX_INIT}/current" 
	
	[ "$1" = "enable" ] || hint_s6_linux_init
}

# TODO: test rc.init sed actually adds -c <compiled> properly
enable_suggestions_s6() {
	printf 'Setting up scripts targeted for s6 at PID=1\n'
	script_dir="${S6_LINUX_INIT}/current/scripts"
	sed -i 's|[[:space:]]*#[[:space:]]*\(s6-rc-init\) \(\/run\/service\)|\1 -c '"${S6_ACTIVE_COMPILED}"' \2|' "${script_dir}"/rc.init
	sed -i 's|[[:space:]]*#[[:space:]]*exec /etc/s6-linux-init/current/scripts/runlevel|exec '"${script_dir}"'/runlevel|' "${script_dir}"/rc.init
	sed -i 's/[[:space:]]*#[[:space:]]*\(exec s6-rc -v2 -bDa change\)/\1/' "${script_dir}"/rc.shutdown
	sed -i 's/[[:space:]]*#[[:space:]]*\(exec s6-rc -v2 -up change .*\)/\1/' "${script_dir}"/runlevel

	printf 'Good luck! :)\n'
}

[ -e "${S6_LINUX_INIT}/current" ] || create_s6_linux_init "$@"
test $# -gt 1 || { hint_set_new_init; exit; }
[ "$1" = "enable" ] && enable_suggestions_s6 "$@"
[ "$1" = "hint" ] && hint_s6_linux_init "$@"
[ "$1" = "resymlink" ] && set_new_init "$@" || hint_set_new_init

